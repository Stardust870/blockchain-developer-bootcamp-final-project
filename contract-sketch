

## *FUNCTIONS*

constructor(string uri_) : create contract instance

getTutors() -> Tutor[] memory : returns array of tutor records

registerTutor(
        string memory _name,
        address _account,
        uint256 _hourlyRate,
        string memory _subject,
        string memory _description,
        string memory _imgUrl
    )  : registers a tutor with given name and wallet address; checks address is valid (not 0) and is not already registered
    Each tutor is assigned a unique uint id (referred to as tutorid) below

bookTutor(uint256 tutorId) public payable : signup user with the tutorid; checks tutor is vailable and payment matches hourly rate
    
_getAvailCount() internal view -> uint256 : count of tutors that are currently available

_getSignupCount(address student) internal view returns -> uint256 : count of the number of sessions a student is signed up for

availableTutorIds() external view -> uint256[] memory : returns tutorids of all available tutors

setAvailability(bool isAvail) public : allows tutors to change their availability

getSignups() public view returns (uint256[] memory) : returns list of tutorids with whom the student (msg.sender) is signed up

deleteBooking(uint256 tutorId) external : allows student (msg.sender) to close out the session freeing up the tutor


## *MODIFIERS* 

isTutorAvailable(uint256 id) : checks that the tutor "id" is registered and is available

isExactPayment(uint256 id) : checks tutor is registered and that their hourly rate matches msg.value

 
 
## *EVENTS*

 event LogTutorAdded(uint256 indexed tutor, string indexed name, uint256 hourlyrate, address account ): emitted upon tutor registration

event LogTutorBooked(uint256 indexed tutor, address indexed student) : emitted when a tutoring session is booked

event LogDeleteBooking(uint256 indexed tutorId, address indexed student) : emitted when a session is closed out

event LogAvailabilityChange(address indexed tutor, bool isAvail) : emitted each time a tutor availability status is changed

